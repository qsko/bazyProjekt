
drop database db;
create database db;
use db;


drop table if exists `Products`;
create table Products( 
			id INT auto_increment,
			name varchar(120),
			weight int,
			price int,
			price_type ENUM("unit", "weight") default("unit"),
            is_18 ENUM("yes", "no") default("no"),
            primary key(id)
            );

drop table if exists `Employees`;           

create table Employees( 
			id INT auto_increment,
			name varchar(120),
			surname varchar(120),
            primary key(id)
            );
drop table if exists `Contracts`;            
create table Contracts( 
			id INT auto_increment,
			employee_id INT,
            beginning date,
            ending date,
			type enum("employment_contract", "mandatory_contract"),
            salary int,
            position enum ("admin","owner", "manager","worker"),
            foreign key(employee_id) references Employees(id),
            primary key(id)
            );

drop table if exists `Deliveries`;
create table Deliveries( 
			id INT auto_increment,
			planned_date datetime,
            status enum ("awaiting","cancelled", "realised"),
            supplier varchar(120),
            primary key(id)
            );
            
drop table if exists `Delivery_Products`;            
create table Delivery_Products(
			id int auto_increment,
			delivery_id int,
            product_id int,
			amount int,
            foreign key(delivery_id) references Deliveries(id),
            foreign key(product_id) references Products(id),
            primary key(id)
            );

drop table if exists `Invoices`;

create table Invoices( 
			id int auto_increment,
			nip int default null,
            date datetime,
            type enum ("receipt", "invoice"),
            primary key(id)
            );            

drop table if exists `Invoice_Products`;
create table Invoice_Products( 
			id int auto_increment,
			invoice_id int,
            product_id int,
			amount int,
            foreign key(invoice_id) references Invoices(id),
            foreign key(product_id) references Products(id),
            primary key(id)
            );            
            
            
drop table if exists `Schedule`;
create table Schedule( 
		
        id int auto_increment,
		employee_id INT,
		beginning datetime,
		ending datetime,
		foreign key(employee_id) references Employees(id),
		primary key(id)
         );  
	
drop table if exists `Sales_by_day`;
create table Sales_by_day( 
			date date,
            amount int default 0,
            primary key(date)
            );  

drop table if exists `Products_aviability`;
create table Products_aviability( 
			prod_id int,
            shop_amount int,
            warehouse_amount int,
            primary key (prod_id),
            foreign key(prod_id) references Products(id)
            );  
            
drop table if exists `Accounts`;
create table Accounts( 
			login varchar(120),
            password varchar(120),
            employee_id int,
            foreign key(employee_id) references Employees(id),
            primary key (employee_id)
            ); 
            
            
            
            
-- functions         

-- zwraca wartosc w groszach
DELIMITER $$

CREATE FUNCTION invoiceValue(
    invoice_id INT
)
RETURNS INT
DETERMINISTIC
BEGIN
	
 return (select SUM(t.Product_price) from (select i.product_id, i.amount, p.price_type, p.price, i.amount * p.price as Product_price from
    (select product_id, amount from Invoice_Products i where i.invoice_id = invoice_id) as i join 
    (select id,price_type, price from Products p) as p on
    i.product_id = p.id
	) as t);
    
END $$

DELIMITER ;           
            
            
DELIMITER $$

create trigger afterInsertInvoiceProductsTrigger after insert on
Invoice_Products

for each row
begin

DECLARE time datetime;

select date into time from Invoices where new.invoice_id = Invoices.id;

-- cast datetime to time
set time = cast(time as date);

set @invoice_id = 0;
select id into @invoice_id from Invoices where new.invoice_id = Invoices.id;


 update Sales_by_day set amount = amount + invoiceValue(@invoice_id)
	where Sales_by_day.date = time;


end $$
DELIMITER ;		


DELIMITER $$

create trigger afterInsertInvoiceProductsTrigger2 after insert on
Invoice_Products

for each row
begin

set @amount = 0;
select amount into @amount from Invoice_Products ip where ip.id = new.id;

set @productId = 0;
select product_id into @productId from Invoice_Products ip where ip.id = new.id;

update Products_aviability set shop_amount = shop_amount - @amount
where prod_id = @product_Id;

end $$
DELIMITER ;		




DELIMITER $$

create trigger afterUpdateDeliveriesTrigger before update on
Deliveries

for each row
begin

	if old.status= 'realised'
    then
		signal sqlstate '45000'
			set message_text = 'you cant change realised delivery';
	end if;

end $$
DELIMITER ;	


DELIMITER $$
create trigger beforeUpdateProductsAviabilityTrigger before update on
Products_aviability
for each row

begin

set @price_type = NULL;  

select price_type into @price_type from Product where Product.id = OLD.prod_id;

if OLD.shop_amount = 0
	then
		if @price_type = `unit`
			then begin 
			
			set new.shop_amount = 100; 
			set new.warehouse_amount = OLD.warehouse_amount-100;
		end; 
        else
			begin
			set new.shop_amount = 10000; 
			set new.warehouse_amount = OLD.warehouse_amount-10000;
            end;
		end if;
end if;
end $$
DELIMITER ;		


insert into Sales_by_day values( '2021-02-01',0);

insert into Products values (1,'jablko',1,1,'unit','no');
 insert into Invoices values (1,123, '2021-02-01 10:01:00.9' ,'invoice');
 insert into Invoice_Products values (1,1,1,3);
 
insert into Products values (2,'gruszka',1,1,'unit','no');
insert into Invoice_Products values (2,1,1,4);
 
 insert into Products values (3,'groszek',1,1,'weight','no');
 insert into Invoice_Products values (3,1,1,500);
 
 insert into Deliveries values(1, '2021-02-01', 'realised','some_supplier');
